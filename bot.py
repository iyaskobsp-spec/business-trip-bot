import json
import os
from datetime import datetime, timedelta
from typing import Optional

import gspread
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes, CallbackQueryHandler
)

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SPREADSHEET_NAME = os.getenv("GOOGLE_SHEETS_SPREADSHEET_NAME", "Requests")
SERVICE_ACCOUNT_JSON = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON", "service_account.json")
DEFAULT_DAYS_AHEAD = int(os.getenv("DEFAULT_DAYS_AHEAD", "60"))

if not TELEGRAM_TOKEN:
    raise RuntimeError("Missing TELEGRAM_TOKEN environment variable")

# ---------- Google Sheets setup ----------
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

# –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —ñ —Ñ–∞–π–ª—É, —ñ JSON-—Ä—è–¥–∫–∞ –≤ –∑–º—ñ–Ω–Ω—ñ–π —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if SERVICE_ACCOUNT_JSON.strip().startswith("{"):
    info = json.loads(SERVICE_ACCOUNT_JSON)
    creds = Credentials.from_service_account_info(info, scopes=SCOPES)
else:
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_JSON, scopes=SCOPES)
gc = gspread.authorize(creds)

# Sheets
ss = gc.open(SPREADSHEET_NAME)
requests_ws = ss.worksheet("Requests")
try:
    managers_ws = ss.worksheet("Managers")
except gspread.WorksheetNotFound:
    managers_ws = None

# Column indexes (1-based) for Requests
COL_ID = 1
COL_MANAGER_TG_ID = 2
COL_STORE = 3
COL_DATE = 4
COL_TIME_FROM = 5
COL_TIME_TO = 6
COL_NEED = 7
COL_BOOKED = 8
COL_STATUS = 9
COL_NOTE = 10

STATUS_PENDING = "Pending"
STATUS_CONFIRMED = "Confirmed"

# ---------- Helpers ----------
def parse_date(date_str: str) -> Optional[datetime]:
    for fmt in ("%d.%m.%Y", "%Y-%m-%d", "%d/%m/%Y"):
        try:
            return datetime.strptime(date_str, fmt)
        except ValueError:
            continue
    return None

def get_manager_id_for_store(store_name: str) -> Optional[int]:
    if not managers_ws or not store_name:
        return None
    rows = managers_ws.get_all_records()
    for r in rows:
        if str(r.get("–ú–∞–≥–∞–∑–∏–Ω", "")).strip() == str(store_name).strip():
            try:
                return int(r.get("Manager_TG_ID"))
            except (TypeError, ValueError):
                return None
    return None

async def send_dm(context: ContextTypes.DEFAULT_TYPE, user_id: int, text: str, reply_markup=None):
    try:
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)
    except Exception as e:
        print(f"Failed to DM {user_id}: {e}")

def format_shift_row(row: list) -> str:
    store = row[COL_STORE - 1]
    date = row[COL_DATE - 1]
    t_from = row[COL_TIME_FROM - 1]
    t_to = row[COL_TIME_TO - 1]
    need = row[COL_NEED - 1]
    status = row[COL_STATUS - 1]
    return (
        f"üìç –ú–∞–≥–∞–∑–∏–Ω: {store}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üïí {t_from}‚Äì{t_to}\n"
        f"üë• –ü–æ—Ç—Ä—ñ–±–Ω–æ: {need}\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {status}"
    )

# ---------- Command handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–º—ñ–Ω.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /shifts ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–º—ñ–Ω–∏\n"
        "‚Ä¢ /ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏"
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Pong üèì")

async def shifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    all_values = requests_ws.get_all_values()
    if not all_values or len(all_values) < 2:
        await update.message.reply_text("–ü–æ–∫–∏ –Ω–µ–º–∞—î –∑–º—ñ–Ω.")
        return

    rows = all_values[1:]
    today = datetime.now().date()
    cutoff = today + timedelta(days=DEFAULT_DAYS_AHEAD)
    shown = 0

    for idx, row in enumerate(rows, start=2):
        status = (row[COL_STATUS - 1] or "").strip() or STATUS_PENDING
        booked = (row[COL_BOOKED - 1] or "").strip()
        date_str = (row[COL_DATE - 1] or "").strip()
        dt = parse_date(date_str)

        if dt:
            if dt.date() < today or dt.date() > cutoff:
                continue

        if status != STATUS_PENDING or booked:
            continue

        text = format_shift_row(row)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏", callback_data=f"book:{idx}")]
        ])
        await update.message.reply_text(text, reply_markup=kb)
        shown += 1

    if shown == 0:
        await update.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–º—ñ–Ω.")

# ---------- Callback handler ----------
async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("book:"):
        row_idx = int(data.split(":")[1])
        row = requests_ws.row_values(row_idx)
        status = (row[COL_STATUS - 1] or "").strip() or STATUS_PENDING
        booked = (row[COL_BOOKED - 1] or "").strip()

        if status != STATUS_PENDING or booked:
            await query.edit_message_text("–ù–∞ –∂–∞–ª—å, —Ü—é –∑–º—ñ–Ω—É –≤–∂–µ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ –∞–±–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
            return

        user = query.from_user
        full_name = (user.full_name or "").strip()
        username = f"@{user.username}" if user.username else ""
        user_id = user.id
        booked_payload = f"{full_name}||{user_id}||{username}"

        current_booked = requests_ws.cell(row_idx, COL_BOOKED).value or ""
        if current_booked.strip():
            await query.edit_message_text("–•—Ç–æ—Å—å —â–æ–π–Ω–æ –∑–∞–±—Ä–æ–Ω—é–≤–∞–≤ —Ü—é –∑–º—ñ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É.")
            return

        requests_ws.update_cell(row_idx, COL_BOOKED, booked_payload)

        manager_id_cell = requests_ws.cell(row_idx, COL_MANAGER_TG_ID).value
        if not manager_id_cell:
            manager_id = get_manager_id_for_store(row[COL_STORE - 1])
        else:
            try:
                manager_id = int(manager_id_cell)
            except (TypeError, ValueError):
                manager_id = get_manager_id_for_store(row[COL_STORE - 1])

        shift_text = format_shift_row(row)
        await query.edit_message_text(
            f"‚úÖ –í–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ –∑–º—ñ–Ω—É:\n{shift_text}\n\n–û—á—ñ–∫—É—î—Ç—å—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞."
        )

        if manager_id:
            confirm_kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è", callback_data=f"confirm:{row_idx}")
            ]])
            await send_dm(context, manager_id,
                          text=(
                              "üü¢ –ù–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤—ñ–¥ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞:\n\n"
                              f"{shift_text}\n\n"
                              f"üë§ {full_name} {username}\n\n"
                              "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?"
                          ),
                          reply_markup=confirm_kb
                          )
        else:
            await send_dm(context, user_id, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ –¥–ª—è —Ü—ñ—î—ó –∑–º—ñ–Ω–∏.")

    elif data.startswith("confirm:"):
        row_idx = int(data.split(":")[1])
        row = requests_ws.row_values(row_idx)
        status = (row[COL_STATUS - 1] or "").strip() or STATUS_PENDING
        booked = (row[COL_BOOKED - 1] or "").strip()

        if not booked:
            await update.effective_message.edit_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —â–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –∑—Ä–æ–±–∏–≤.")
            return
        if status == STATUS_CONFIRMED:
            await update.effective_message.edit_text("–¶—é –∑–º—ñ–Ω—É –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
            return

        requests_ws.update_cell(row_idx, COL_STATUS, STATUS_CONFIRMED)

        parts = booked.split("||")
        user_id = None
        if len(parts) >= 2:
            try:
                user_id = int(parts[1])
            except ValueError:
                user_id = None

        shift_text = format_shift_row(row)
        await update.effective_message.edit_text("‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")

        if user_id:
            await send_dm(context, user_id,
                          text=f"üéâ –í–∞—à—É –∑–º—ñ–Ω—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n{shift_text}")

# ---------- Main ----------
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("shifts", shifts))
    app.add_handler(CallbackQueryHandler(on_callback))
    print("Bot is running (polling)...")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()